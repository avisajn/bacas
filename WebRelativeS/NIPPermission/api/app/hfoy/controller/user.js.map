{"version":3,"sources":["../../../src/hfoy/controller/user.js"],"names":["DateFormat","require","db","dbhadoop","regAction","http","method","fail","param","post","username","demand","pwd","t","time","Date","email","getUserId","userInfo","status","model","add","id","account_id","password","addtime","apikey","api_key","user_id","success","msg","getAction","order","field","select","data","gettokenAction","get","ciphertext","getTime","postAction","putAction","where","update","insertId","setpwdAction","decryptedData","_old","old","_new","new","_id"],"mappings":"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","file":"user.js","sourcesContent":["'use strict';\n\nlet DateFormat = require('dateformat');\nimport Base from './basenone.js';\nimport DB from '../../db.js';\nimport MD5 from 'blueimp-md5';\nconst db = DB.dbhadoop;\n\nimport {decryptCode ,encryptCode} from '../../util.js';\nimport API from '../../api.js';\n\nexport default class extends Base {\n    // 添加一条数据\n    async regAction(){\n        if(this.http.method != 'POST'){return this.fail(-1,'参数错误'); }\n        let param = this.post();\n        let username = param.username,\n            // password = param.password,\n            demand = param.demand,\n            pwd = param.t,\n            time = DateFormat(new Date(), \"yyyy-mm-dd hh:MM:ss\");\n\n        const email = param.email || '-';\n        if(!username || !email ) return this.fail(-1 ,'参数不正确');\n        \n        if(pwd) pwd = MD5(pwd);\n        else pwd = '-';\n\n        // console.log(pwd);\n        // return this.success('添加成功！');\n        // 这里获取新的userid\n        const userInfo = await API.getUserId();\n        if(userInfo.status != 'ok') return this.fail(-1 ,'获取用户ID出错了！');;\n        \n        let model = this.model('user' ,db);\n        const user_id = await model.add({\n            id : userInfo.account_id,\n            username : username||'-',\n            password : pwd||'-',\n            addtime : time,\n            email : email||'-',\n            demand : demand||'-',\n            status : 0,\n            apikey : userInfo.api_key\n        })\n        return this.success({user_id : user_id, msg : '提交成功！'});\n    }\n\n\n    async getAction(){\n        let model = this.model('user' ,db);\n        const data = await model.order('id desc').field('apikey,demand,username,email').select();\n        return this.success(data);\n    }\n\n    async gettokenAction(){\n        // 输入一个 id 和 email ，然后生成一个 email地址\n        let param = this.get();\n        let id = param.id;\n\n        if(!id) return this.fail(-1 ,'参数不正确');\n\n        let ciphertext = encryptCode({\n            time : (new Date().getTime() + 1 * 60 * 60 * 1000),\n            id : id\n        });\n\n        return this.success(`?t=${ciphertext}`);\n    }\n\n\n\n\n\n    // 添加一条数据\n    async postAction(){\n        let param = this.post();\n        let username = param.username,\n            // password = param.password,\n            email = param.email,\n            demand = param.demand,\n            time = DateFormat(new Date(), \"yyyy-mm-dd hh:MM:ss\");\n\n        if(!username || !email || !demand){\n            return this.fail(-1 ,'参数不正确');\n        }\n\n        let model = this.model('user' ,db);\n        await model.add({\n            username : username,\n            // password : password,\n            addtime : time,\n            email : email,\n            demand : demand,\n            status : 0,\n        })\n        return this.success('添加成功！');\n    }\n\n    // 修改一条数据\n    async putAction(){\n        if(!this.id){\n            return this.fail('id为空！');\n        }\n\n        let param = this.post();\n        let id = param.id, \n            username = param.username,\n            email = param.email,\n            demand = param.demand;\n        if(!username || !email || !demand){\n            return this.fail(-1 ,'参数不正确');\n        }\n        let model = this.model('user' ,db);\n\n        let insertId = await model.where({id: id }).update({\n            username : username,\n            email : email,\n            demand : demand,\n        });\n        return this.success('修改成功');\n    }\n\n    async setpwdAction(){\n        if(this.http.method != 'POST'){return this.fail(-1,'参数错误'); }\n        // 验证旧的密码是否正确\n        let param = this.post();\n        if(!param.data){\n            return this.fail(-1 ,'参数错误');\n        }\n        const decryptedData = decryptCode(param.data);\n        let _old = decryptedData.old ,\n            _new = decryptedData.new ,\n            _id = decryptedData.id ;\n        if(!_id || !_old || !_new){\n            return this.fail(-1 ,'参数错误');\n        }\n        let model = this.model('user' ,db);\n        await model.where({id:_id}).update({password : _new ,status:1});\n        return this.success('重置成功！');\n    }\n}"]}