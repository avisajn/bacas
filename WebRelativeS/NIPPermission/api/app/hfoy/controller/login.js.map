{"version":3,"sources":["../../../src/hfoy/controller/login.js"],"names":["db","dbhadoop","indexAction","http","method","fail","token","post","data","userData","username","password","model","console","log","field","where","select","users","length","time","Date","getTime","ciphertext","cookie","timeout","success","id","postAction","param","email","demand","DateFormat","add","addtime","status","outAction","resetpwdAction","decryptedData","_old","old","_new","new","_name","userId","update"],"mappings":"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","file":"login.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\nimport DB from '../../db.js';\nconst db = DB.dbhadoop;\n\nimport {decryptCode ,encryptCode} from '../../util.js';\n\nexport default class extends Base {\n    // 登录验证\n    async indexAction(){\n        if(this.http.method != 'POST'){return this.fail(-1,'参数错误'); }\n        let token = this.post().data;\n        if(!token){return this.fail(-1,'参数错误！'); }\n        const userData = decryptCode(token);\n        if(!userData){return this.fail(-2 ,'错误的数据！'); }\n\n        let username = userData.username,\n            password = userData.password;\n\n        if(!username || !password){return this.fail(-1,'参数错误'); }\n\n        let model = this.model('user' ,db);\n\n\n        console.log('model:',model);\n\n        let users = await model.field('id,username').where({username:username,password:password}).select();\n\n        if(users.length <= 0){return this.fail(-2,'用户名或密码错误！'); }\n        users = users[0];\n        users.time = (new Date().getTime() + 10 * 24 * 60 * 60 * 1000);\n\n        let ciphertext = encryptCode(users);\n        this.cookie(\"token\", ciphertext, {\n          timeout: 10 * 24 * 3600 //设置 cookie 有效期为 7 天\n        });\n        return this.success({id : users.id ,token : ciphertext });\n    }\n\n\n    // 添加一条数据\n    async postAction(){\n        let param = this.post();\n        let username = param.username,\n            email = param.email,\n            demand = param.demand,\n            time = DateFormat(new Date(), \"yyyy-mm-dd hh:MM:ss\");\n\n        if(!username || !email || !demand){\n            return this.fail(-1 ,'参数不正确');\n        }\n\n        let model = this.model('user' ,db);\n        const id = await model.add({\n            username : username,\n            addtime : time,\n            email : email,\n            demand : demand,\n            status : 0,\n        })\n        // let ciphertext = encryptCode({\n        //     id : id,\n        //     setPassword : true,\n        // });\n        // this.cookie(\"token\", ciphertext, {\n        //   timeout: 1 * 60 * 60 //设置 cookie 有效期为 7 天\n        // });\n        // return this.success({token : ciphertext });\n        return this.success('注册成功！');\n    }\n\n\n    async outAction(){\n        if(this.http.method != 'POST'){return this.fail(-1,'参数错误'); }\n        this.cookie(\"token\" ,null);\n        return this.success(\"\");\n    }\n\n    async resetpwdAction(){\n        if(this.http.method != 'POST'){return this.fail(-1,'参数错误'); }\n        // 验证旧的密码是否正确\n        let param = this.post();\n        if(!param.data){\n            return this.fail(-1 ,'参数错误');\n        }\n        const decryptedData = decryptCode(param.data);\n        let _old = decryptedData.old ,\n            _new = decryptedData.new ,\n            _name = decryptedData.username ;\n        if(!_name || !_old || !_new){\n            return this.fail(-1 ,'参数错误');\n        }\n        let model = this.model('user' ,db);\n        let users = await model.field('id').where({username:_name, password:_old}).select();\n        if(users.length <= 0){\n            return this.fail(-2 ,'旧密码错误');\n        }\n        let userId = users[0].id;\n        await model.where({id:userId}).update({password : _new });\n        return this.success('重置成功！');\n    }\n\n}"]}