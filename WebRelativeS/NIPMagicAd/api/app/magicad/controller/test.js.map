{"version":3,"sources":["../../../src/magicad/controller/test.js"],"names":["container","cdnHost","id","br","blobService","createBlobService","readFiles","_path","fileList","walk","path","dirList","readdirSync","forEach","item","statSync","isDirectory","push","uploadFile","file_path","to_path","country","name","substring","lastIndexOf","r","f","createBlockBlobFromLocalFile","error","result","response","isSuccessful","url","uploadAction","file_lists","urls","console","log","fail","i","len","length","success"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGA,IAAMA,YAAY,aAAlB;AACA,IAAMC,UAAU;AACZC,QAAK,4BADO;AAEZC,QAAK;AAFO,CAAhB;;AAKA,IAAMC,cAAc,uBAAMC,iBAAN,CAAwB,MAAxB,EAAgC,0FAAhC,CAApB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAAyB;AACrB,QAAIC,WAAW,EAAf;AACA,QAAMC,OAAO,SAAPA,IAAO,CAASC,IAAT,EAAc;AACvB,YAAIC,UAAU,aAAGC,WAAH,CAAeF,IAAf,CAAd;AACAC,gBAAQE,OAAR,CAAgB,UAASC,IAAT,EAAc;AAC1B,gBAAG,aAAGC,QAAH,CAAYL,OAAO,GAAP,GAAaI,IAAzB,EAA+BE,WAA/B,EAAH,EAAgD;AAC5CP,qBAAKC,OAAO,GAAP,GAAaI,IAAlB;AACH,aAFD,MAEK;AACDN,yBAASS,IAAT,CAAcP,OAAO,EAAP,GAAYI,IAA1B;AACH;AACJ,SAND;AAOH,KATD;AAUAL,SAAKF,KAAL;AACA,WAAOC,QAAP;AACH;;AAED,IAAMU,aAAa,SAAbA,UAAa,CAASC,SAAT,EAAoBC,OAApB,EAA4BC,OAA5B,EAAoC;AACnD,QAAIC,OAAOH,UAAUI,SAAV,CAAoBJ,UAAUK,WAAV,CAAsB,GAAtB,IAA2B,CAA/C,CAAX;AACA;AACA,WAAO,sBAAY,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACzB;AACAtB,oBAAYuB,4BAAZ,CAAyC3B,SAAzC,EAAoDoB,UAAQE,IAA5D,EAAkEH,SAAlE,EAA6E,UAASS,KAAT,EAAgBC,MAAhB,EAAwBC,QAAxB,EAAkC;AAC3G,gBAAIF,SAAS,CAACE,SAASC,YAAvB,EAAqC;AAACN,kBAAE,EAACG,YAAD,EAAF,EAAY;AAAS;AAC3DH,cAAE,EAACG,YAAD,EAAQI,KAAI/B,QAAQoB,OAAR,IAAmBD,OAAnB,GAA2BE,IAAvC,EAAF;AACH,SAHD;AAIH,KANM,CAAP;AAOH,CAVD;;;;;;;;;;qBAgBUW,Y;;;;;;;;AACIvB,gC,GAAO,sC;AACPU,mC,GAAU,e;AAChB;;AACIc,sC,GAAa,I;AACXC,gC,GAAO,E;;;AAETD,yCAAa5B,UAAUI,IAAV,CAAb;;;;;;;;AAEA0B,oCAAQC,GAAR;6DACO,KAAKC,IAAL,CAAU,CAAC,CAAX,EAAa,SAAb,C;;;AAEHC,6B,GAAE,C,EAAEC,G,GAAIN,WAAWO,M;;;kCAAOF,IAAEC,G;;;;;;mCACLtB,WAAWgB,WAAWK,CAAX,CAAX,EAA0BnB,OAA1B,EAAkC,IAAlC,C;;;;AAApBQ,iC,SAAAA,K;AAAOI,+B,SAAAA,G;;AACd,gCAAGJ,KAAH,EAAS;AACLQ,wCAAQC,GAAR,CAAY,QAAZ,EAAsBH,WAAWK,CAAX,CAAtB;AACH,6BAFD,MAEK;AACDJ,qCAAKlB,IAAL,CAAUe,GAAV;AACAI,wCAAQC,GAAR,CAAY,MAAZ,EAAmBL,GAAnB;AACH;;;AAPmCO,+B;;;;;6DASjC,KAAKG,OAAL,CAAaP,IAAb,C","file":"test.js","sourcesContent":["'use strict';\nimport azure from 'azure-storage';\nimport moment from 'moment';\nimport Base from './base.js';\nimport DB from '../../db.js';\nimport fs from 'fs';\n\n\nconst container = 'news-images';\nconst cdnHost = {\n    id : 'http://img.cdn.baca.co.id/',\n    br : 'http://img.cdn.baca.co.id/'\n}\n\nconst blobService = azure.createBlobService('baca', 'AlfJeE0T/a0hWMXRTR0oYj7GVxhvNAkL+brSotrJqzWmsabcEGJBL57fvMFTe01tHidrvBGWihYmAE6o16ORBA==');\n\nfunction readFiles(_path){\n    let fileList = [];\n    const walk = function(path){  \n        var dirList = fs.readdirSync(path);\n        dirList.forEach(function(item){\n            if(fs.statSync(path + '/' + item).isDirectory()){\n                walk(path + '/' + item);\n            }else{\n                fileList.push(path + '' + item);\n            }\n        });\n    }\n    walk(_path);\n    return fileList;\n}\n\nconst uploadFile = function(file_path ,to_path,country){\n    let name = file_path.substring(file_path.lastIndexOf('/')+1);\n    // console.log('name:' ,name);\n    return new Promise((r ,f) => {\n        // return r({});\n        blobService.createBlockBlobFromLocalFile(container, to_path+name, file_path, function(error, result, response) {\n            if (error || !response.isSuccessful) {r({error}); return; }\n            r({error ,url:cdnHost[country] + to_path+name});\n        });\n    })\n};\n\n\n\nexport default class extends Base {\n\n    async uploadAction(){\n        const path = '/Users/wangxiaowei/Desktop/tinified/';\n        const to_path = 'event/gc/img/';\n        // const to_path = 'payloan/banner/';\n        let file_lists = null;\n        const urls = [];\n        try{\n            file_lists = readFiles(path);\n        }catch(e){\n            console.log(e);\n            return this.fail(-1,'读取目录错误！');\n        }\n        for(let i=0,len=file_lists.length;i<len;i++){\n            const {error ,url} = await uploadFile(file_lists[i] ,to_path,'id');\n            if(error){\n                console.log('error:' ,file_lists[i]);\n            }else{\n                urls.push(url);\n                console.log('url:',url)\n            }\n        }\n        return this.success(urls);\n    }\n \n\n}   "]}