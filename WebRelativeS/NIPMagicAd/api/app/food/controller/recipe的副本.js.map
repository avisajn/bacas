{
    "version": 3,
    "sources": [
        "../../../src/food/controller/recipe的副本.js"
    ],
    "names": [
        "db",
        "dbfood",
        "getbytypeAction",
        "params",
        "get",
        "ptype",
        "type",
        "current",
        "rowCount",
        "fail",
        "model_food_label",
        "model",
        "model_recipe",
        "field",
        "where",
        "page",
        "select",
        "_foodIds",
        "foodIds",
        "map",
        "k",
        "push",
        "food_id",
        "join",
        "data",
        "feature",
        "length",
        "substring",
        "label",
        "indexOf",
        "split",
        "success",
        "getbyidAction",
        "id",
        "getlabelsAction",
        "console",
        "log",
        "model_labels",
        "obj",
        "parent",
        "key",
        "name"
    ],
    "mappings": "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",
    "file": "../../../src/food/controller/recipe的副本.js",
    "sourcesContent": [
        "'use strict';\n\nimport moment from 'moment';\nimport Base from './base.js';\nimport DB from '../../db.js';\nconst db = DB.dbfood;\n\nimport {decryptCode ,encryptCode} from '../../util.js';\n\nexport default class extends Base {\n    // 获取列表\n    async getbytypeAction(){\n        let params      = this.get() || {},\n            ptype       = params.type ,\n            current     = params.current || 1,\n            rowCount    = params.rowCount || 10;\n\n        // ptype = 7;  // 家常菜\n        if(!ptype){return this.fail(-1 ,'参数错误'); }\n        // 先上 food_label 中查询一下，并分页\n        const model_food_label = this.model('food_label' ,db);\n        const model_recipe = this.model('recipe' ,db);\n\n        const _foodIds = await model_food_label.field('food_id').where('label_id='+ptype).page(current, rowCount).select();\n        const foodIds = [];\n        _foodIds.map((k) => foodIds.push(k.food_id));\n        \n        // 在food表中查询一下\n        const data = await model_recipe.field('id,food_name name,foot_pic_small pic,label,effect,features feature').where(`id in (${foodIds.join(',')})`).select();\n        // 文字很多的去掉\n        data.map((k) => {\n            if(k.feature && k.feature.length > 100){\n                k.feature = k.feature.substring(0,100);\n            }\n            if(k.label){\n                if(k.label.indexOf(';') > 0){\n                    k.label = k.label.split(';');\n                }else{\n                    k.label = [k.label];\n                }\n            }\n        })\n        return this.success(data);\n    }\n\n    // 根据ID查询出菜单\n    async getbyidAction(){\n        let params    = this.get() || {},\n            id        = params.id;\n        if(!id){return this.fail(-1 ,'参数错误'); }\n        const model_recipe = this.model('recipe' ,db);\n        let data = await model_recipe.field('id,food_name,food_pic,label,effect,material,seasoning,intro,content,features,taboo').where('id='+id).select();\n        if(data.length <= 0){\n            return this.fail(-2,'未查询到！');\n        }\n        data = data[0];\n        return this.success(data);\n    }\n\n    // 得到所有的类型\n    async getlabelsAction(){\n        console.log('getlabelsAction');\n        // 一共三类\n        const model_labels = this.model('labels' ,db);\n        const data = await model_labels.field('id,name,parent').where('parent!=0').select();\n        const obj = {'-1' : [], '-2' : [], '-3' : [] };\n        data.map((k) => obj['-'+k.parent].push({key:k.id ,name:k.name}));\n        console.log('obj:',obj);\n        return this.success(obj);\n    }\n\n}"
    ]
}