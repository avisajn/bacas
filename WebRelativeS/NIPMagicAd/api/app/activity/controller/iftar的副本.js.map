{
    "version": 3,
    "sources": [
        "../../../src/activity/controller/iftar的副本.js"
    ],
    "names": [
        "db",
        "activity",
        "container",
        "cdnHost",
        "id",
        "br",
        "blobService",
        "createBlobService",
        "renameFile",
        "tmp_path",
        "target_path",
        "r",
        "f",
        "rename",
        "err",
        "unlink",
        "removeFile",
        "path",
        "uploadImage",
        "name",
        "country",
        "file_path",
        "think",
        "RUNTIME_PATH",
        "createBlockBlobFromLocalFile",
        "error",
        "result",
        "response",
        "isSuccessful",
        "console",
        "log",
        "url",
        "uploadimageAction",
        "http",
        "method",
        "fail",
        "param",
        "post",
        "files",
        "_file",
        "len",
        "k",
        "RESOURCE_PATH",
        "names",
        "file",
        "oldName",
        "originalFilename",
        "ext",
        "substring",
        "lastIndexOf",
        "newName",
        "Date",
        "getTime",
        "parseInt",
        "Math",
        "random",
        "push",
        "success",
        "uploadazureAction",
        "setlikeAction",
        "_from",
        "from",
        "_to",
        "to",
        "_type",
        "type",
        "model",
        "paramObj",
        "user_id",
        "iftar_id",
        "where",
        "count",
        "model_iftar",
        "add",
        "execute",
        "delete",
        "getlistAction",
        "get",
        "userid",
        "res",
        "field",
        "alias",
        "join",
        "limit",
        "order",
        "select",
        "map",
        "islike",
        "getbyidAction",
        "length"
    ],
    "mappings": "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",
    "file": "../../../src/activity/controller/iftar的副本.js",
    "sourcesContent": [
        "'use strict';\nimport azure from 'azure-storage';\nimport moment from 'moment';\nimport Base from './base.js';\nimport DB from '../../db.js';\nimport fs from 'fs';\n\nconst db = DB.activity;\n\nconst container = 'activity-images';\nconst cdnHost = {\n    id : 'http://baca-activity.azureedge.net/',\n    br : 'http://baca-activity.azureedge.net/'\n}\n\n\nconst blobService = azure.createBlobService('baca', 'AlfJeE0T/a0hWMXRTR0oYj7GVxhvNAkL+brSotrJqzWmsabcEGJBL57fvMFTe01tHidrvBGWihYmAE6o16ORBA==');\n\nconst renameFile = function(tmp_path ,target_path){\n    return new Promise((r ,f) => {\n        // // 移动文件\n        fs.rename(tmp_path, target_path, function(err) {\n            if (err) throw err;\n            // 删除临时文件夹文件, \n            fs.unlink(tmp_path, function() {\n                if (err) throw err;  \n                r();\n            });\n        });\n    })\n},\n\nremoveFile = function(path){\n    return new Promise((r ,f) => {\n        fs.unlink(path, function(err) {\n            if (err) throw err;  \n            r();\n        });\n    })\n},\n\nuploadImage = function(name ,country){\n    let file_path = think.RUNTIME_PATH + '/upload/' + name;\n    return new Promise((r ,f) => {\n        blobService.createBlockBlobFromLocalFile(container, 'iftar/'+name, file_path , function(error, result, response) {\n            if (error || !response.isSuccessful) {r({error}); return; }\n            console.log('result:' ,result ,error);\n            r({error ,url:cdnHost[country] + 'iftar/'+name});\n        });\n        // fileService.createDirectoryIfNotExists('taskshare', 'taskdirectory', function(error, result, response) {\n        //   if (!error) {\n        //     // if result = true, share was created.\n        //     // if result = false, share already existed.\n        //   }\n        // });\n    })\n\n}\n\n\n\nexport default class extends Base {\n\n\n    // 将图片上传到MagicAD的服务器\n    async uploadimageAction(){\n        if(this.http.method!='POST'){\n            return this.fail(-1);\n        }\n\n        let param = this.post();\n        let files = this.http._file;\n\n        let len = 0;\n        for(let k in files){len++; }\n        if(len != 2) return this.fail(-4,'张数不对！');\n\n        // return this.success(think.RESOURCE_PATH);\n\n        let target_path = think.RESOURCE_PATH + '/static/upd/';\n        var names = [];\n        for(let k in files){\n            const file = files[k];\n            const oldName = file.originalFilename;\n            const ext  = oldName.substring(oldName.lastIndexOf('.'));\n            const newName = new Date().getTime()+\"\"+parseInt(Math.random()*1000);\n            names.push(newName+ext);\n            await renameFile(file.path ,target_path+newName+ext);\n        }\n        return this.success(names);\n    }\n\n    // 将图片上传到AZURE服务器\n    async uploadazureAction(){\n        // 参考 https://github.com/Azure/azure-storage-node\n        if(this.http.method!='POST'){\n            return this.fail(-1);\n        }\n\n        let param = this.post();\n        let file = this.http._file.file;\n\n        let tmp_path = file.path,\n            oldName = new Date().getTime()+\"\"+parseInt(Math.random()*1000),\n            ext  = '.jpg';\n\n\n        // return this.success('123123');\n        let name = oldName+ext;\n\n        let target_path = think.RUNTIME_PATH + '/upload/' + name;\n\n        await renameFile(tmp_path ,target_path);\n\n        const {error ,url} = await uploadImage(name ,'id');\n        if(error){\n            return this.fail(-1 ,'上传错误！'+JSON.stringify(error));\n        }\n        await removeFile(target_path);\n        return this.success(url);\n    }\n\n    async setlikeAction(){\n\n        let param = this.post();\n        let _from    = param.from,\n            _to   = param.to ,\n            _type   = param.type ;\n\n        if(!_from || !_to || !_type){return this.fail(-1 ,'参数不正确'); }\n        let model = this.model('iftar_like' ,db);\n        let paramObj = {user_id:_from ,iftar_id:_to };\n        let count = await model.where(paramObj).count();\n        if(_type == '1'){   // 添加\n            console.log('count:' ,count);\n            if(count == 0){\n                let model_iftar = this.model('iftar' ,db);\n                await model.add(paramObj);\n                await model_iftar.execute('update iftar set `like`=`like`+1 where id='+_to);\n            }\n            return this.success('提交成功！');\n        }else{  // 删除\n            if(count > 0){\n                let model_iftar = this.model('iftar' ,db);\n                await model.delete({where: paramObj });\n                await model_iftar.execute('update iftar set `like`=`like`-1 where id='+_to);\n            }\n            return this.success('取消成功！');\n        }\n    }\n\n    async getlistAction(){\n        let param = this.get() ,\n            userid = param.id;\n\n        let res = null;\n        let model = this.model('iftar' ,db);\n        if(userid){\n            res = await model.field('base.id ,base.user_id ,base.like ,base.name,base.pic ,lk.id as islike')\n                .alias('base')\n                .join(\"iftar_like lk on lk.iftar_id=base.id and lk.user_id='\"+userid+\"'\")\n                .limit(0,100)\n                .order('`like` desc')\n                .select();\n            res.map((k) => {\n                if(k.islike){\n                    k.islike = 1;\n                }else{\n                    k.islike = '';\n                }\n            })\n            // console.log(res);\n        }else{\n            res = await model.field('id ,user_id, name, pic ,like , 0 as islike ').limit(0,100).order('`like` desc').select();\n        }\n        return this.success(res);\n    }\n\n    // 根据用户ID，获取相关内容\n    async getbyidAction(){\n        let param = this.get() ,\n            userid = param.id;\n\n        if(!userid ){return this.fail(-1 ,'参数不正确'); }\n\n        let model = this.model('iftar' ,db);\n        let res = await model.field('user_id, name, pic ,like ,id ').where(\"user_id='\"+userid+\"' \").order('id desc').select();\n        if(res.length <= 0) {\n\n            return this.fail(-2 ,'不存在！');\n        }\n        return this.success(res[0]);\n    }\n}   "
    ]
}