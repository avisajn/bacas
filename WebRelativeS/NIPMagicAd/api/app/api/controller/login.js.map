{"version":3,"sources":["../../../src/api/controller/login.js"],"names":["UID","require","DateFormat","indexAction","http","method","fail","token","post","data","userData","username","password","model","field","where","select","users","length","time","Date","getTime","ciphertext","cookie","timeout","success","id","country","rids","roleids","outAction","resetpwdAction","param","decryptedData","_old","old","_new","new","_name","userId","update"],"mappings":"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","file":"login.js","sourcesContent":["'use strict';\nlet UID = require('node-uuid');\nlet DateFormat = require('dateformat');\nimport Base from './base.js';\n\nimport {decryptCode ,encryptCode} from '../../util.js';\n\nexport default class extends Base {\n    // 登录验证\n    async indexAction(){\n        if(this.http.method != 'POST'){return this.fail(-1,'参数错误'); }\n        let token = this.post().data;\n        if(!token){return this.fail(-1,'参数错误！'); }\n        const userData = decryptCode(token);\n        if(!userData){return this.fail(-2 ,'错误的数据！'); }\n\n        let username = userData.username,\n            password = userData.password;\n\n        if(!username || !password){return this.fail(-1,'参数错误'); }\n\n        let model = this.model('user');\n        let users = await model.field('id,username,country,roleids').where({username:username,password:password}).select();\n        if(users.length <= 0){return this.fail(-2,'用户名或密码错误！'); }\n        users = users[0];\n        users.time = (new Date().getTime() + 2 * 24 * 60 * 60 * 1000);\n\n        let ciphertext = encryptCode(users);\n        this.cookie(\"token\", ciphertext, {\n          timeout: 2 * 24 * 3600 //设置 cookie 有效期为 7 天\n        });\n        return this.success({id : users.id ,country:users.country, rids : users.roleids ,token : ciphertext });\n    }\n\n\n    async outAction(){\n        if(this.http.method != 'POST'){return this.fail(-1,'参数错误'); }\n        this.cookie(\"token\" ,null);\n        return this.success(\"\");\n    }\n\n    async resetpwdAction(){\n        if(this.http.method != 'POST'){return this.fail(-1,'参数错误'); }\n        // 验证旧的密码是否正确\n        let param = this.post();\n        if(!param.data){\n            return this.fail(-1 ,'参数错误');\n        }\n        const decryptedData = decryptCode(param.data);\n        let _old = decryptedData.old ,\n            _new = decryptedData.new ,\n            _name = decryptedData.username ;\n        if(!_name || !_old || !_new){\n            return this.fail(-1 ,'参数错误');\n        }\n        let model = this.model('user');\n        let users = await model.field('id').where({username:_name, password:_old}).select();\n        if(users.length <= 0){\n            return this.fail(-2 ,'旧密码错误');\n        }\n        let userId = users[0].id;\n        await model.where({id:userId}).update({password : _new });\n        return this.success('重置成功！');\n    }\n}"]}